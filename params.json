{"name":"Pyggplot","tagline":"Pythonic wrapper for R's ggplot using rpy2 and pandas","body":"pyggplot\r\n========\r\n\r\npyggplot is a Pythonic wrapper around the [R ggplot2 library](http://had.co.nz/ggplot2/).\r\n\r\nUnlike the [Python ggplot](https://github.com/yhat/ggplot) this is not a reimplementation based on [Matplotlib](http://matplotlib.org/), but a straightforward *take [Pandas](http://pandas.pydata.org/) data frames and shove them into [R](http://www.r-project.org/) via [rpy2](https://pypi.python.org/pypi/rpy2)* approach.\r\n\r\n## Installation\r\n\r\nThe easiest installation is via [PyPI](https://pypi.python.org/pypi).\r\n\r\n    $ pip install pyggplot\r\n\r\nYou may be required to update `pandas`, `rpy2`, so you may be required to run\r\n\r\n    $ pip install --upgrade pyggplot \r\n\r\n## Usage\r\n\r\n    import pandas as pd\r\n    import numpy as np\r\n    import ggplot\r\n\r\n    df = pd.DataFrame({'x': np.random.rand(100),\r\n                       'y': np.random.randn(100),\r\n                       'group': ['A','B'] * 50})\r\n\r\n    p = pyggplot.Plot(df)\r\n    p.add_scatter('x','y', color='group')\r\n    p.render('output.png')\r\n    ## or if you want to use it in IPython Notebook\r\n    # p.render_notebook()\r\n\r\n## Examples\r\nLook at (https://github.com/TyberiusPrime/pyggplot/blob/master/examples/pyggplot%20samples.html) for some examples with their corresponding R syntax.\r\n\r\n\r\n## Further usage\r\n\r\nTakes a `pandas.DataFrame` object, then add layers with the various `add_xyz`\r\nfunctions (e.g. `add_scatter`).\r\n\r\nRefer to the ggplot documentation about the layers (geoms), and simply\r\nreplace `geom_*` with `add_*`.\r\nSee: http://docs.ggplot2.org/0.9.3.1/index.html\r\n\r\nYou do not need to separate aesthetics from values - the wrapper\r\nwill treat a parameter as value if and only if it is not a column name.\r\n(so `y = 0` is a value, `color = 'blue'` is a value - except if you have a column `'blue'`, then it is a column!.\r\nAnd `y = 'value'` does not work, but that seems to be a ggplot issue).\r\n\r\nWhen the DataFrame is passed to R:\r\n\r\n* row indices are turned into columns with 'reset_index',\r\n* multi level column indices are flattened by concatenating them with `' '`, that is `(X, 'mean')` becomes `'x mean'`.\r\n\r\nError messages are not great - most of them translate to 'one or more columns were not found',\r\nbut they can appear as a lot of different actual messages such as\r\n\r\n* argument \"env\" is missing, with no default\r\n* object 'y' not found\r\n* object 'dat_0' not found\r\n* requires the following missing aesthetics: x\r\n* non numeric argument to binary operator\r\n\r\nwithout actually quite pointing at what is strictly the offending value.\r\nAlso, the error appears when rendering (or printing in the [IPython Notebook](http://ipython.org/notebook.html)),\r\nnot when adding the layer.\r\n\r\n## Open questions\r\n\r\n* the stat support is not great - it doesn't easily map into pythonic objects. For now, do your stats in pandas - more powerful anyhow! \r\n* how could error messages be improved?\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}